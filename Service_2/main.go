package main

import (
	"log"

	amqp "github.com/rabbitmq/amqp091-go"
)

func main() {
	// Устанавливаем соединение с сервером RabbitMQ
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	if err != nil {
		log.Fatalf("Ошибка при установке соединения с RabbitMQ: %s", err)
	}
	defer conn.Close()

	// Создаем канал
	ch, err := conn.Channel()
	if err != nil {
		log.Fatalf("Ошибка при создании канала: %s", err)
	}
	defer ch.Close()

	// Объявляем первую очередь, если по какой то причине она еще не была создана
	queue1, err := ch.QueueDeclare(
		"Queue - 1", // Имя очереди
		false,   // durable
		false,   // delete when unused
		false,   // exclusive
		false,   // no-wait
		nil,     // arguments
	)
	if err != nil {
		log.Fatalf("Ошибка при объявлении очереди: %s", err)
	}

	// Объявляем вторую очередь, если по какой то причине она еще не была создана
	queue2, err := ch.QueueDeclare(
		"Queue - 2", // Имя очереди
		false,   // durable
		false,   // delete when unused
		false,   // exclusive
		false,   // no-wait
		nil,     // arguments
	)
	if err != nil {
		log.Fatalf("Ошибка при объявлении очереди: %s", err)
	}

	// Устанавливаем подписку на первую очередь
	msgs1, err := ch.Consume(
		queue1.Name, // Имя очереди
		"",     // Идентификатор потребителя. Если он пустой, RabbitMQ сгенерирует случайный идентификатор для потребителя.
		true,   // Указывает, следует ли использовать автоматическое подтверждение получения сообщений.
		false,  // Указывает, должен ли потребитель стать эксклюзивным
		false,  // Указывает, следует ли игнорировать сообщения, которые отправляются из того же соединения, которое их отправляет. Этот аргумент редко используется.
		false,  // Указывает, следует ли выполнить операцию без ожидания ответа от сервера.
		nil,    // Дополнительные аргументы, которые могут быть переданы при установке подписки на очередь. 
	)
	if err != nil {
		log.Fatalf("Ошибка при получении сообщений из очереди: %s", err)
	}

	// Устанавливаем подписку на вторую очередь
	msgs2, err := ch.Consume(
		queue2.Name, // Имя очереди
		"",     // Идентификатор потребителя. Если он пустой, RabbitMQ сгенерирует случайный идентификатор для потребителя.
		true,   // Указывает, следует ли использовать автоматическое подтверждение получения сообщений.
		false,  // Указывает, должен ли потребитель стать эксклюзивным
		false,  // Указывает, следует ли игнорировать сообщения, которые отправляются из того же соединения, которое их отправляет. Этот аргумент редко используется.
		false,  // Указывает, следует ли выполнить операцию без ожидания ответа от сервера.
		nil,    // Дополнительные аргументы, которые могут быть переданы при установке подписки на очередь. 
	)
	if err != nil {
		log.Fatalf("Ошибка при получении сообщений из очереди: %s", err)
	}

	// Чтение из первой очереди
	go func() {
		for {
			select {
			case msg := <-msgs1:
				log.Printf("Получено сообщение из первой очереди: %s", msg.Body)
			}
		}
	}()

	// Чтение из второй очереди
	go func() {
		for {
			select {
			case msg := <-msgs2:
				log.Printf("Получено сообщение из второй очереди: %s", msg.Body)
			}
		}
	}()

	for {

	}
}
